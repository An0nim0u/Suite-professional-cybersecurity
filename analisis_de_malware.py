import requests
import json
import csv
import hashlib
import time
from prettytable import PrettyTable

# Configuración de la API de VirusTotal
API_KEY = "95ebd8d85b22823c830c8d50f72744fb4d47faa937d0b48c06eecc8206abfb46"
BASE_URL = "https://www.virustotal.com/api/v3/urls/"
FILE_URL = "https://www.virustotal.com/api/v3/files/"
HEADERS = {
    "x-apikey": API_KEY
}

# Función para codificar la URL
def encode_url(url):
    """Codifica la URL para que sea compatible con la API de VirusTotal."""
    return url.strip().encode("utf-8").decode("utf-8")

# Función para obtener la información de la URL desde la API de VirusTotal
def get_url_info(url):
    """Obtiene el análisis de una URL desde VirusTotal."""
    encoded_url = encode_url(url)
    url_id = requests.utils.quote(encoded_url)
    url_endpoint = BASE_URL + url_id

    try:
        response = requests.get(url_endpoint, headers=HEADERS)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error en la consulta: {e}")
        return None

# Función para obtener información sobre un archivo desde VirusTotal
def get_file_info(file_hash):
    """Obtiene el análisis de un archivo desde VirusTotal."""
    file_endpoint = FILE_URL + file_hash
    try:
        response = requests.get(file_endpoint, headers=HEADERS)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error en la consulta de archivo: {e}")
        return None

# Función para analizar los resultados de la respuesta de la URL
def analyze_results(data, url):
    """Analiza los resultados de VirusTotal y presenta la información."""
    if not data or 'data' not in data:
        print("No se pudo obtener datos de VirusTotal.")
        return
    
    url_info = data['data']
    attributes = url_info['attributes']
    
    print(f"\nAnálisis de la URL: {attributes['url']}")
    print(f"Fecha de análisis: {attributes['last_analysis_date']}")
    
    # Resultado general de la URL
    analysis_stats = attributes['last_analysis_stats']
    print("\nEstadísticas de análisis:")
    print(f"Positivo: {analysis_stats['malicious']}")
    print(f"Seguro: {analysis_stats['safe']}")
    print(f"Indeterminado: {analysis_stats['undetected']}")
    
    # Mostrar motores antivirus que la han marcado como maliciosos
    print("\nMotores Antivirus que detectaron la URL como maliciosa:")
    malicious_engines = []
    for engine, result in attributes['last_analysis_results'].items():
        if result['category'] == "malicious":
            malicious_engines.append(f"{engine}: {result['result']}")
    
    if malicious_engines:
        for engine in malicious_engines:
            print(f"- {engine}")
    else:
        print("No se detectaron resultados maliciosos por motores antivirus.")

    # Información adicional
    print("\nDetalles adicionales:")
    if 'subdomain' in attributes:
        print(f"Subdominio: {attributes['subdomain']}")
    if 'domain' in attributes:
        print(f"Dominio: {attributes['domain']}")
    
    # Posibles indicios de Phishing
    if attributes.get('is_phishing', False):
        print("¡Atención! Esta URL ha sido identificada como un intento de Phishing.")
    else:
        print("Esta URL no parece ser un intento de Phishing.")
    
    # Análisis de las URL relacionadas
    related_urls = attributes.get('related_urls', [])
    if related_urls:
        print("\nURLs relacionadas:")
        for related in related_urls:
            print(f"- {related}")

# Función para manejar los errores de la respuesta de la API
def handle_api_error(response):
    """Maneja los posibles errores de la API de VirusTotal."""
    if response.status_code == 403:
        print("Acceso denegado: La clave API es incorrecta o ha alcanzado el límite.")
    elif response.status_code == 404:
        print("La URL solicitada no se ha encontrado.")
    elif response.status_code == 500:
        print("Error en el servidor de VirusTotal.")
    else:
        print(f"Error desconocido: {response.status_code}")
    return None

# Función para obtener un análisis más detallado
def get_detailed_analysis(url):
    """Obtiene un análisis detallado de la URL."""
    print(f"Analizando la URL: {url}")
    data = get_url_info(url)
    
    if data:
        analyze_results(data, url)
    else:
        print("Error al obtener resultados.")

# Función para cargar un archivo y obtener su hash
def get_file_hash(file_path):
    """Obtiene el hash de un archivo."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        while chunk := f.read(4096):
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

# Función para exportar los resultados en formato JSON
def export_to_json(data, file_name="resultados.json"):
    """Exporta los resultados a un archivo JSON."""
    with open(file_name, "w") as json_file:
        json.dump(data, json_file, indent=4)

# Función para exportar los resultados en formato CSV
def export_to_csv(data, file_name="resultados.csv"):
    """Exporta los resultados a un archivo CSV."""
    with open(file_name, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(["Motivo", "Descripción"])
        
        for key, value in data.items():
            writer.writerow([key, value])

# Función para analizar los resultados y exportarlos
def analyze_and_export(url, export_format="json"):
    """Analiza la URL y exporta los resultados en el formato solicitado."""
    data = get_url_info(url)
    
    if data:
        results = analyze_results(data, url)
        
        if export_format == "json":
            export_to_json(results)
        elif export_format == "csv":
            export_to_csv(results)
        else:
            print("Formato de exportación no válido.")
    else:
        print("No se pudo obtener resultados de la URL.")

# Función principal para la ejecución del script
def main():
    """Función principal para ejecutar el script."""
    print("Bienvenido al Analizador de URLs con VirusTotal")
    
    while True:
        print("\nOpciones disponibles:")
        print("1. Análisis de URL")
        print("2. Análisis de archivo (por hash)")
        print("3. Exportar resultados")
        
        option = input("Selecciona una opción: ").strip()
        
        if option == "1":
            url = input("\nIntroduce la URL a analizar: ").strip()
            get_detailed_analysis(url)
        
        elif option == "2":
            file_path = input("\nIntroduce la ruta del archivo para analizar: ").strip()
            file_hash = get_file_hash(file_path)
            print(f"Hash del archivo: {file_hash}")
            file_info = get_file_info(file_hash)
            
            if file_info:
                analyze_results(file_info, file_path)
            else:
                print("No se encontraron resultados para este archivo.")
        
        elif option == "3":
            export_format = input("\nSelecciona el formato de exportación (json/csv): ").strip().lower()
            url = input("\nIntroduce la URL a exportar: ").strip()
            analyze_and_export(url, export_format)
        
        else:
            print("Opción no válida. Por favor, elige 1, 2 o 3.")
        
        another = input("\n¿Deseas realizar otro análisis? (s/n): ").strip().lower()
        if another != 's':
            print("Gracias por usar el Analizador de URLs. ¡Hasta luego!")
            break

if __name__ == "__main__":
    main()
